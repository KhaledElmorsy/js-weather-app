{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/webpack/runtime/global","webpack://my-webpack-project/webpack/runtime/publicPath","webpack://my-webpack-project/./src/weather.js","webpack://my-webpack-project/./src/templates/helpers.js","webpack://my-webpack-project/./src/assets/graphics/weather icons/index.js","webpack://my-webpack-project/./src/templates/iconMap.js","webpack://my-webpack-project/./src/index.js","webpack://my-webpack-project/./src/templates/weatherCard.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import countries from './assets/misc/countries.json';\n\n/**\n * Weather API handler that automatically fetches weather data and returns it in\n * nicely formatted and filtered objects that can be used by DOM handlers.\n *\n * Uses OpenWeather's {@link https://openweathermap.org/forecast5 5 day forecast API}\n */\nexport default (function weather() {\n  const apiKey = '59a057bac22e7b1ca98bd87a6a2e788e';\n  // Set defaults\n  let city = 'Cairo'; // Aye ìÄùìÄÇìÄììÄîìÄïìÄñìÄó\n  let units = 'metric';\n\n  /**\n   * Make API call for a 5 day - 3 hr interval weather forecast and convert to\n   * an object\n   * @returns {Promse<Object>}\n   */\n  async function getWeather() {\n    try {\n      const fetchURL = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${units}&appid=${apiKey}`;\n      const response = await fetch(fetchURL);\n      if (!response.ok) throw new Error('City not found.');\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      city = 'Cairo';\n      console.log(`${error} Loading ${city} instead.`);\n      return getWeather();\n    }\n  }\n\n  /** Variable w/ weather data promise */\n  let weatherData;\n\n  /**\n   * Update local weather data variable\n   */\n  function updateData() {\n    weatherData = getWeather();\n  }\n\n  updateData();\n\n  /**\n   * Filter 5 day forecast for data points corresponding to closest time.\n   * i.e. Closest time: 3pm ==> Keep only 3pm data points\n   * @returns {Promise<Object>}\n   */\n  const getDailyForecast = () => (weatherData.then((data) => {\n    const dataPoints = data.list;\n    const currentPoint = dataPoints[0]; // data is sorted by most recent\n    const currentHour = new Date(currentPoint.dt * 1000).getHours();\n    return dataPoints.filter(\n      (point) => new Date(point.dt * 1000).getHours() === currentHour\n    );\n  }));\n\n  /**\n   * Get city and country names from the response. Country data is provided as\n   * alpha-2 codes so they're converted to full names using a dict style JSON\n   * @returns {Promise<Object>}\n   */\n  const getLocation = () => (weatherData.then((data) => ({\n    city: data.city.name,\n    country: countries[data.city.country],\n  })));\n\n  /**\n   * Update module's city and fetch new data\n   * @param {string} newCity \n   * @returns {weather} module\n   */\n  function setCity(newCity) {\n    city = newCity;\n    updateData();\n    return this;\n  }\n\n  /**\n   * Update model's unit standard and fetch new data. Do nothing if input's invalid.\n   * @param {string} newUnits Unit standards. 'metric' or 'imperial'.\n   * @returns {weather} module\n   */\n  function setUnits(newUnits) {\n    if (['metric', 'imperial'].find(newUnits)) {\n      units = newUnits;\n      updateData();\n    }\n    return this;\n  }\n\n  return { getDailyForecast, getLocation, setCity, setUnits };\n})();\n","/**\n * Converts Outer HTML to element (w/children)\n * @param {string} html Outer HTML\n * @returns {HTMLElement} Resulting Element\n */\nexport function HTMLtoElement(html) {\n  const element = document.createElement('div');\n  element.innerHTML = html;\n  if (element.childElementCount === 1) return element.firstChild;\n  return element;\n}\n\nexport default { HTMLtoElement };\n","import cloudy from './cloudy.png'\nimport nightClear from './nightClear.png';\nimport rain from './rain.png';\nimport sunny from './sunny.png';\nimport windy from './windy.png';\nimport partlyCloudy from './partlyCloudy.png';\nimport nightCloudy from './nightCloudy.png';\nimport snow from './snow.png';\nimport storm from './storm.png';\n\nexport default {\n  cloudy,\n  nightClear,\n  rain,\n  sunny,\n  windy,\n  partlyCloudy,\n  nightCloudy,\n  snow,\n  storm,\n};\n","import icons from '../assets/graphics/weather icons';\n\n// function setIcon(icon, idArray) {\n//   return idArray.reduce((obj, key) => {\n//     obj[key] = icon;\n//     return obj;\n//   }, {});\n// }\n\n// const partlyCloudy = setIcon(icons.partlyCloudy, ['02d', '02n', '04d', '04n']);\n// const cloudy = setIcon(icons.cloudy, ['03d', '03n']);\n// const rain = setIcon(icons.rain, ['09d', '09n', '10d', '10n']);\n// const storm = setIcon(icons.storm, ['11d', '11n']);\n// const snow = setIcon(icons.snow, ['13d', '13n']);\n// const windy = setIcon(icons.windy, ['50d', '50n']);\n\n// export default {\n//   '01d': icons.sunny,\n//   ...partlyCloudy,\n//   ...cloudy,\n//   ...rain,\n//   ...storm,\n//   ...snow,\n//   ...windy,\n// };\n\nexport default {\n  '01d': icons.sunny,\n  '01n': icons.nightClear,\n  '02d': icons.partlyCloudy,\n  '02n': icons.partlyCloudy,\n  '03d': icons.cloudy,\n  '03n': icons.cloudy,\n  '04d': icons.partlyCloudy,\n  '04n': icons.partlyCloudy,\n  '09d': icons.rain,\n  '09n': icons.rain,\n  '10d': icons.rain,\n  '10n': icons.rain,\n  '11d': icons.strom,\n  '11n': icons.strom,\n  '13d': icons.snow,\n  '13n': icons.snow,\n  '50d': icons.windy,\n  '50n': icons.windy,\n};\n","import './style.css';\nimport weather from './weather';\n\nimport { weatherCard } from './templates';\n\nfunction drawCards(weatherArray) {\n  const container = document.getElementById('overview');\n  container.innerHTML = '';\n  weatherArray.forEach((day) => {\n    container.appendChild(weatherCard(day));\n  });\n}\n\nfunction updateLocation(locationData) {\n  document.getElementById('city').textContent = locationData.city;\n  document.getElementById('country').textContent = locationData.country;\n}\n\nconst input = document.querySelector('#searchbox');\ninput.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter') {\n    weather.setCity(e.target.value).getDailyForecast().then(drawCards);\n    weather.getLocation().then(updateLocation);\n  }\n});\n\ninput.dispatchEvent(new KeyboardEvent('keydown', {key: 'Enter'}));\n","import { HTMLtoElement } from './helpers';\nimport iconMap from './iconMap';\n\n/**\n * Create card element displaying weather data for a specific date time\n * @param {object} data weather data for one datetime\n * @returns {HTMLElement}\n */\nexport default function weatherCard(data) {\n  const date = new Date(data.dt * 1000);\n\n  const weekdayOption = { timeZone: 'UTC', weekday: 'long' };\n  const dateOption = { timeZone: 'UTC', dateStyle: 'medium' };\n  const hourOption = {\n    timeZone: 'UTC',\n    hour12: 'true',\n    hour: 'numeric',\n    minute: 'numeric',\n  };\n\n  const weekday = new Intl.DateTimeFormat('en-US', weekdayOption).format(date);\n  const hour = new Intl.DateTimeFormat('en-US', hourOption).format(date);\n  const fullDate = new Intl.DateTimeFormat('en-US', dateOption).format(date);\n\n  const html = `<div class=\"card\">\n              <div class=\"date-time\">\n                  <h2>${weekday}</h2>\n                  <p class=\"date\">${fullDate}</p>\n                  <p class=\"time\">${hour}</p>\n              </div>\n              <div class=\"details\">\n                  <p class=\"precipiration\">Precipiration: ${data.pop * 100}%</p>\n                  <p class=\"humiditiy\">Humidity: ${data.main.humidity}%</p>\n                  <p class=\"wind\">Wind: ${Math.round(data.wind.speed * 3.6)}km/h</p>\n              </div>\n              <h1 class=\"temp\">${Math.round(data.main.temp * 10) / 10}¬∞C</h1>\n              <img src=\"${iconMap[data.weather[0].icon]}\" alt=\"\" srcset=\"\">\n            </div>`;\n  return HTMLtoElement(html);\n}\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","weatherData","apiKey","city","units","getWeather","fetchURL","fetch","response","ok","json","data","console","log","updateData","getDailyForecast","then","dataPoints","list","currentPoint","currentHour","Date","dt","getHours","filter","point","getLocation","name","country","countries","setCity","newCity","setUnits","newUnits","find","cloudy","nightClear","rain","sunny","windy","partlyCloudy","nightCloudy","snow","storm","icons","drawCards","weatherArray","container","getElementById","innerHTML","forEach","day","date","weekday","hour","fullDate","html","element","appendChild","Intl","DateTimeFormat","timeZone","format","hour12","minute","dateStyle","pop","main","humidity","Math","round","wind","speed","temp","iconMap","weather","icon","createElement","childElementCount","firstChild","updateLocation","locationData","textContent","input","querySelector","addEventListener","key","target","value","dispatchEvent","KeyboardEvent"],"sourceRoot":""}